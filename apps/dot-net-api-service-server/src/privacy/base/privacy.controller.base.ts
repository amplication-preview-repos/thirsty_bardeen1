/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PrivacyService } from "../privacy.service";
import { PrivacyCreateInput } from "./PrivacyCreateInput";
import { Privacy } from "./Privacy";
import { PrivacyFindManyArgs } from "./PrivacyFindManyArgs";
import { PrivacyWhereUniqueInput } from "./PrivacyWhereUniqueInput";
import { PrivacyUpdateInput } from "./PrivacyUpdateInput";

export class PrivacyControllerBase {
  constructor(protected readonly service: PrivacyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Privacy })
  async createPrivacy(
    @common.Body() data: PrivacyCreateInput
  ): Promise<Privacy> {
    return await this.service.createPrivacy({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        informationDisplaySettings: true,
        profileVisibility: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Privacy] })
  @ApiNestedQuery(PrivacyFindManyArgs)
  async privacies(@common.Req() request: Request): Promise<Privacy[]> {
    const args = plainToClass(PrivacyFindManyArgs, request.query);
    return this.service.privacies({
      ...args,
      select: {
        createdAt: true,
        id: true,
        informationDisplaySettings: true,
        profileVisibility: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Privacy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async privacy(
    @common.Param() params: PrivacyWhereUniqueInput
  ): Promise<Privacy | null> {
    const result = await this.service.privacy({
      where: params,
      select: {
        createdAt: true,
        id: true,
        informationDisplaySettings: true,
        profileVisibility: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Privacy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePrivacy(
    @common.Param() params: PrivacyWhereUniqueInput,
    @common.Body() data: PrivacyUpdateInput
  ): Promise<Privacy | null> {
    try {
      return await this.service.updatePrivacy({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          informationDisplaySettings: true,
          profileVisibility: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Privacy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePrivacy(
    @common.Param() params: PrivacyWhereUniqueInput
  ): Promise<Privacy | null> {
    try {
      return await this.service.deletePrivacy({
        where: params,
        select: {
          createdAt: true,
          id: true,
          informationDisplaySettings: true,
          profileVisibility: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
