/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Privacy as PrismaPrivacy,
  User as PrismaUser,
} from "@prisma/client";

export class PrivacyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PrivacyCountArgs, "select">): Promise<number> {
    return this.prisma.privacy.count(args);
  }

  async privacies(args: Prisma.PrivacyFindManyArgs): Promise<PrismaPrivacy[]> {
    return this.prisma.privacy.findMany(args);
  }
  async privacy(
    args: Prisma.PrivacyFindUniqueArgs
  ): Promise<PrismaPrivacy | null> {
    return this.prisma.privacy.findUnique(args);
  }
  async createPrivacy(args: Prisma.PrivacyCreateArgs): Promise<PrismaPrivacy> {
    return this.prisma.privacy.create(args);
  }
  async updatePrivacy(args: Prisma.PrivacyUpdateArgs): Promise<PrismaPrivacy> {
    return this.prisma.privacy.update(args);
  }
  async deletePrivacy(args: Prisma.PrivacyDeleteArgs): Promise<PrismaPrivacy> {
    return this.prisma.privacy.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.privacy
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
