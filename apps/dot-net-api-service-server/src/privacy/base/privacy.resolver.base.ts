/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Privacy } from "./Privacy";
import { PrivacyCountArgs } from "./PrivacyCountArgs";
import { PrivacyFindManyArgs } from "./PrivacyFindManyArgs";
import { PrivacyFindUniqueArgs } from "./PrivacyFindUniqueArgs";
import { CreatePrivacyArgs } from "./CreatePrivacyArgs";
import { UpdatePrivacyArgs } from "./UpdatePrivacyArgs";
import { DeletePrivacyArgs } from "./DeletePrivacyArgs";
import { User } from "../../user/base/User";
import { PrivacyService } from "../privacy.service";
@graphql.Resolver(() => Privacy)
export class PrivacyResolverBase {
  constructor(protected readonly service: PrivacyService) {}

  async _privaciesMeta(
    @graphql.Args() args: PrivacyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Privacy])
  async privacies(
    @graphql.Args() args: PrivacyFindManyArgs
  ): Promise<Privacy[]> {
    return this.service.privacies(args);
  }

  @graphql.Query(() => Privacy, { nullable: true })
  async privacy(
    @graphql.Args() args: PrivacyFindUniqueArgs
  ): Promise<Privacy | null> {
    const result = await this.service.privacy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Privacy)
  async createPrivacy(
    @graphql.Args() args: CreatePrivacyArgs
  ): Promise<Privacy> {
    return await this.service.createPrivacy({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Privacy)
  async updatePrivacy(
    @graphql.Args() args: UpdatePrivacyArgs
  ): Promise<Privacy | null> {
    try {
      return await this.service.updatePrivacy({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Privacy)
  async deletePrivacy(
    @graphql.Args() args: DeletePrivacyArgs
  ): Promise<Privacy | null> {
    try {
      return await this.service.deletePrivacy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Privacy): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
