/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserConnection as PrismaUserConnection } from "@prisma/client";

export class UserConnectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserConnectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userConnection.count(args);
  }

  async userConnections(
    args: Prisma.UserConnectionFindManyArgs
  ): Promise<PrismaUserConnection[]> {
    return this.prisma.userConnection.findMany(args);
  }
  async userConnection(
    args: Prisma.UserConnectionFindUniqueArgs
  ): Promise<PrismaUserConnection | null> {
    return this.prisma.userConnection.findUnique(args);
  }
  async createUserConnection(
    args: Prisma.UserConnectionCreateArgs
  ): Promise<PrismaUserConnection> {
    return this.prisma.userConnection.create(args);
  }
  async updateUserConnection(
    args: Prisma.UserConnectionUpdateArgs
  ): Promise<PrismaUserConnection> {
    return this.prisma.userConnection.update(args);
  }
  async deleteUserConnection(
    args: Prisma.UserConnectionDeleteArgs
  ): Promise<PrismaUserConnection> {
    return this.prisma.userConnection.delete(args);
  }
}
