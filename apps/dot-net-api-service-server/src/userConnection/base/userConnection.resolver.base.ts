/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserConnection } from "./UserConnection";
import { UserConnectionCountArgs } from "./UserConnectionCountArgs";
import { UserConnectionFindManyArgs } from "./UserConnectionFindManyArgs";
import { UserConnectionFindUniqueArgs } from "./UserConnectionFindUniqueArgs";
import { CreateUserConnectionArgs } from "./CreateUserConnectionArgs";
import { UpdateUserConnectionArgs } from "./UpdateUserConnectionArgs";
import { DeleteUserConnectionArgs } from "./DeleteUserConnectionArgs";
import { UserConnectionService } from "../userConnection.service";
@graphql.Resolver(() => UserConnection)
export class UserConnectionResolverBase {
  constructor(protected readonly service: UserConnectionService) {}

  async _userConnectionsMeta(
    @graphql.Args() args: UserConnectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserConnection])
  async userConnections(
    @graphql.Args() args: UserConnectionFindManyArgs
  ): Promise<UserConnection[]> {
    return this.service.userConnections(args);
  }

  @graphql.Query(() => UserConnection, { nullable: true })
  async userConnection(
    @graphql.Args() args: UserConnectionFindUniqueArgs
  ): Promise<UserConnection | null> {
    const result = await this.service.userConnection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserConnection)
  async createUserConnection(
    @graphql.Args() args: CreateUserConnectionArgs
  ): Promise<UserConnection> {
    return await this.service.createUserConnection({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserConnection)
  async updateUserConnection(
    @graphql.Args() args: UpdateUserConnectionArgs
  ): Promise<UserConnection | null> {
    try {
      return await this.service.updateUserConnection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserConnection)
  async deleteUserConnection(
    @graphql.Args() args: DeleteUserConnectionArgs
  ): Promise<UserConnection | null> {
    try {
      return await this.service.deleteUserConnection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
